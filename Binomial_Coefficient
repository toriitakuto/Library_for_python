table_size = 2 * 10**5

fac = [1] * (table_size + 1)
finv = [1] * (table_size + 1)

for i in range(2, table_size + 1):
    fac[i] = fac[i - 1] * i % mod
finv[table_size] = pow(fac[table_size], mod - 2, mod)
for i in range(table_size - 1, -1, -1):
    finv[i] = finv[i + 1] * (i + 1) % mod


def binom(n, k):
    if n < 0 or k < 0:
        return 0
    if k > n:
        return 0
    global table_size, fac, finv
    if n > table_size:
        fac += [0] * (n - table_size)
        finv += [0] * (n - table_size)
        for i in range(table_size + 1, n + 1):
            fac[i] = fac[i - 1] * i % mod
        finv[n] = inv(fac[n])
        for i in range(n - 1, table_size, -1):
            finv[i] = finv[i + 1] * (i + 1) % mod
        table_size = n
    return (fac[n] * finv[k] % mod) * finv[n - k] % mod


def fpow(x, k):
    res = 1
    while k:
        if k & 1:
            res = res * x % mod
        x = x * x % mod
        k >>= 1
    return res


def inv(a):
    if a < table_size:
        return fac[a - 1] * finv[a] % mod
    return fpow(a, mod - 2)


def modint_to_frac(a):
    a %= mod
    if a == 0:
        return "0/1"
    for X in range(1, 10000):
        for Y in range(1, X + 1):
            Z = Y * inv(X) % mod
            if a == Z:
                return str(Y) + "/" + str(X)
            if a == mod - Z:
                return "-" + str(Y) + "/" + str(X)

            Z = X * inv(Y) % mod
            if a == Z:
                return str(X) + "/" + str(Y)
            if a == mod - Z:
                return "-" + str(X) + "/" + str(Y)
